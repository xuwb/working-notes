{"version":3,"sources":["webpack:///js/c.js","webpack:///./src/js/c.js"],"names":["webpackJsonp","0","module","exports","__webpack_require__","10"],"mappings":"AAAAA,cAAc,EAAE,KAEVC,EACA,SAASC,EAAQC,EAASC,GAE/BF,EAAOC,QAAUC,EAAoB,KAKhCC,GACA,SAASH,EAAQC,GCXvBD,EAAAC,QAAA","file":"js/c.js","sourcesContent":["webpackJsonp([3,10],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(10);\n\n\n/***/ },\n\n/***/ 10:\n/***/ function(module, exports) {\n\n\tmodule.exports = 'A和B都引用C，同时A引用B。\\\r\n\t打包时，A文件只会添加一次C文件内容，后面调用B时，只是调用对C输出内容的引用。\\\r\n\t但是在两个html页面分别调用A和B时，C的内容相当于在每个页面都加载了一遍，增加了下载的资源。 \\n \\\r\n\t解决办法：1、将通用资源放到到页面 <script> 中，通过config文件中的 externals: { } 加载 \\n'\r\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** js/c.js\n **/","module.exports = 'A和B都引用C，同时A引用B。\\\r\n打包时，A文件只会添加一次C文件内容，后面调用B时，只是调用对C输出内容的引用。\\\r\n但是在两个html页面分别调用A和B时，C的内容相当于在每个页面都加载了一遍，增加了下载的资源。 \\n \\\r\n解决办法：1、将通用资源放到到页面 <script> 中，通过config文件中的 externals: { } 加载 \\n'\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/c.js\n ** module id = 10\n ** module chunks = 3 5 9\n **/"],"sourceRoot":""}